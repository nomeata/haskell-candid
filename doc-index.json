[{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Unary\">Unary</a> a = <a href=\"#v:Unary\">Unary</a> {<ul class=\"subs\"><li><a href=\"#v:unUnary\">unUnary</a> :: a</li></ul>}","name":"Unary Unary unUnary","module":"Codec.Candid.Tuples","link":"Codec-Candid-Tuples.html#t:Unary"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Tuplable\">Tuplable</a> a = AsTuple_ a (IsTuple a)","name":"Tuplable","module":"Codec.Candid.Tuples","link":"Codec-Candid-Tuples.html#t:Tuplable"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:AsTuple\">AsTuple</a> a = <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Type-Bool.html#t:If\" title=\"Data.Type.Bool\">If</a> (IsTuple a) a (<a href=\"Codec-Candid-Tuples.html#t:Unary\" title=\"Codec.Candid.Tuples\">Unary</a> a)","name":"AsTuple","module":"Codec.Candid.Tuples","link":"Codec-Candid-Tuples.html#t:AsTuple"},{"display_html":"<a href=\"#v:asTuple\">asTuple</a> :: AsTuple_ a b =&gt; a -&gt; <a href=\"Codec-Candid-Tuples.html#t:AsTuple\" title=\"Codec.Candid.Tuples\">AsTuple</a> a","name":"asTuple","module":"Codec.Candid.Tuples","link":"Codec-Candid-Tuples.html#v:asTuple"},{"display_html":"<a href=\"#v:fromTuple\">fromTuple</a> :: AsTuple_ a b =&gt; <a href=\"Codec-Candid-Tuples.html#t:AsTuple\" title=\"Codec.Candid.Tuples\">AsTuple</a> a -&gt; a","name":"fromTuple","module":"Codec.Candid.Tuples","link":"Codec-Candid-Tuples.html#v:fromTuple"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:DidFile\">DidFile</a> = <a href=\"#v:DidFile\">DidFile</a> {<ul class=\"subs\"><li><a href=\"#v:defs\">defs</a> :: [DidDef TypeName]</li><li><a href=\"#v:service\">service</a> :: DidService TypeName</li></ul>}","name":"DidFile DidFile service defs","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#t:DidFile"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TestAssertion\">TestAssertion</a><ul class=\"subs\"><li>= <a href=\"#v:CanParse\">CanParse</a> <a href=\"Codec-Candid-TestExports.html#t:TestInput\" title=\"Codec.Candid.TestExports\">TestInput</a></li><li>| <a href=\"#v:CannotParse\">CannotParse</a> <a href=\"Codec-Candid-TestExports.html#t:TestInput\" title=\"Codec.Candid.TestExports\">TestInput</a></li><li>| <a href=\"#v:ParseEq\">ParseEq</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a> <a href=\"Codec-Candid-TestExports.html#t:TestInput\" title=\"Codec.Candid.TestExports\">TestInput</a> <a href=\"Codec-Candid-TestExports.html#t:TestInput\" title=\"Codec.Candid.TestExports\">TestInput</a></li></ul>","name":"TestAssertion ParseEq CanParse CannotParse","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#t:TestAssertion"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TestInput\">TestInput</a><ul class=\"subs\"><li>= <a href=\"#v:FromTextual\">FromTextual</a> <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li><li>| <a href=\"#v:FromBinary\">FromBinary</a> <a href=\"https://hackage.haskell.org/package/bytestring-0.10.12.0/docs/Data-ByteString-Lazy.html#t:ByteString\" title=\"Data.ByteString.Lazy\">ByteString</a></li></ul>","name":"TestInput FromTextual FromBinary","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#t:TestInput"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:CandidTest\">CandidTest</a> a = <a href=\"#v:CandidTest\">CandidTest</a> {<ul class=\"subs\"><li><a href=\"#v:testLine\">testLine</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a></li><li><a href=\"#v:testAssertion\">testAssertion</a> :: <a href=\"Codec-Candid-TestExports.html#t:TestAssertion\" title=\"Codec.Candid.TestExports\">TestAssertion</a></li><li><a href=\"#v:testType\">testType</a> :: [<a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> a]</li><li><a href=\"#v:testDesc\">testDesc</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li></ul>}","name":"CandidTest CandidTest testDesc testType testLine testAssertion","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#t:CandidTest"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:CandidTestFile\">CandidTestFile</a> = <a href=\"#v:CandidTestFile\">CandidTestFile</a> {<ul class=\"subs\"><li><a href=\"#v:testDefs\">testDefs</a> :: [DidDef TypeName]</li><li><a href=\"#v:testTests\">testTests</a> :: [<a href=\"Codec-Candid-TestExports.html#t:CandidTest\" title=\"Codec.Candid.TestExports\">CandidTest</a> TypeName]</li></ul>}","name":"CandidTestFile CandidTestFile testDefs testTests","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#t:CandidTestFile"},{"display_html":"<a href=\"#v:parseCandidTests\">parseCandidTests</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Codec-Candid-TestExports.html#t:CandidTestFile\" title=\"Codec.Candid.TestExports\">CandidTestFile</a>","name":"parseCandidTests","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#v:parseCandidTests"},{"display_html":"<a href=\"#v:generateCandidDefs\">generateCandidDefs</a> :: <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; [DidDef TypeName] -&gt; <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> ([<a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Syntax.html#t:Dec\" title=\"Language.Haskell.TH.Syntax\">Dec</a>], TypeName -&gt; <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Syntax.html#t:Q\" title=\"Language.Haskell.TH.Syntax\">Q</a> <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a>)","name":"generateCandidDefs","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#v:generateCandidDefs"},{"display_html":"<a href=\"#v:candidTypeQ\">candidTypeQ</a> :: [<a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Syntax.html#t:Name\" title=\"Language.Haskell.TH.Syntax\">Name</a>] -&gt; <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Lib-Internal.html#t:TypeQ\" title=\"Language.Haskell.TH.Lib.Internal\">TypeQ</a>","name":"candidTypeQ","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#v:candidTypeQ"},{"display_html":"<a href=\"#v:invertHash\">invertHash</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Word.html#t:Word32\" title=\"Data.Word\">Word32</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"invertHash","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#v:invertHash"},{"display_html":"<a href=\"#v:unrollTypeTable\">unrollTypeTable</a> :: <a href=\"Codec-Candid.html#t:SeqDesc\" title=\"Codec.Candid\">SeqDesc</a> -&gt; (<span class=\"keyword\">forall</span> k. (<a href=\"https://hackage.haskell.org/package/prettyprinter-1.7.1/docs/Prettyprinter.html#t:Pretty\" title=\"Prettyprinter\">Pretty</a> k, <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Ord.html#t:Ord\" title=\"Data.Ord\">Ord</a> k) =&gt; [<a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> (Ref k <a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a>)] -&gt; r) -&gt; r","name":"unrollTypeTable","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#v:unrollTypeTable"},{"display_html":"<a href=\"#v:typeGraph\">typeGraph</a> :: <span class=\"keyword\">forall</span> a. <a href=\"Codec-Candid.html#t:Candid\" title=\"Codec.Candid\">Candid</a> a =&gt; <a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> (Ref <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Typeable.html#t:TypeRep\" title=\"Data.Typeable\">TypeRep</a> <a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a>)","name":"typeGraph","module":"Codec.Candid.TestExports","link":"Codec-Candid-TestExports.html#v:typeGraph"},{"display_html":"<a href=\"#v:encode\">encode</a> :: <a href=\"Codec-Candid.html#t:CandidArg\" title=\"Codec.Candid\">CandidArg</a> a =&gt; a -&gt; <a href=\"https://hackage.haskell.org/package/bytestring-0.10.12.0/docs/Data-ByteString-Lazy.html#t:ByteString\" title=\"Data.ByteString.Lazy\">ByteString</a>","name":"encode","module":"Codec.Candid","link":"Codec-Candid.html#v:encode"},{"display_html":"<a href=\"#v:encodeBuilder\">encodeBuilder</a> :: <span class=\"keyword\">forall</span> a. <a href=\"Codec-Candid.html#t:CandidArg\" title=\"Codec.Candid\">CandidArg</a> a =&gt; a -&gt; <a href=\"https://hackage.haskell.org/package/binary-0.8.8.0/docs/Data-Binary-Builder.html#t:Builder\" title=\"Data.Binary.Builder\">Builder</a>","name":"encodeBuilder","module":"Codec.Candid","link":"Codec-Candid.html#v:encodeBuilder"},{"display_html":"<a href=\"#v:decode\">decode</a> :: <span class=\"keyword\">forall</span> a. <a href=\"Codec-Candid.html#t:CandidArg\" title=\"Codec.Candid\">CandidArg</a> a =&gt; <a href=\"https://hackage.haskell.org/package/bytestring-0.10.12.0/docs/Data-ByteString-Lazy.html#t:ByteString\" title=\"Data.ByteString.Lazy\">ByteString</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> a","name":"decode","module":"Codec.Candid","link":"Codec-Candid.html#v:decode"},{"display_html":"<span class=\"keyword\">class</span> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Type-Reflection.html#t:Typeable\" title=\"Type.Reflection\">Typeable</a> a, <a href=\"Codec-Candid.html#t:CandidVal\" title=\"Codec.Candid\">CandidVal</a> (<a href=\"Codec-Candid.html#t:AsCandid\" title=\"Codec.Candid\">AsCandid</a> a)) =&gt; <a href=\"#t:Candid\">Candid</a> a <span class=\"keyword\">where</span><ul class=\"subs\"><li><span class=\"keyword\">type</span> <a href=\"#t:AsCandid\">AsCandid</a> a</li><li><a href=\"#v:toCandid\">toCandid</a> :: a -&gt; <a href=\"Codec-Candid.html#t:AsCandid\" title=\"Codec.Candid\">AsCandid</a> a</li><li><a href=\"#v:fromCandid\">fromCandid</a> :: <a href=\"Codec-Candid.html#t:AsCandid\" title=\"Codec.Candid\">AsCandid</a> a -&gt; a</li></ul>","name":"Candid AsCandid toCandid fromCandid","module":"Codec.Candid","link":"Codec-Candid.html#t:Candid"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:CandidRow\">CandidRow</a> r = (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Type-Reflection.html#t:Typeable\" title=\"Type.Reflection\">Typeable</a> r, <a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Internal.html#t:AllUniqueLabels\" title=\"Data.Row.Internal\">AllUniqueLabels</a> r, <a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Internal.html#t:AllUniqueLabels\" title=\"Data.Row.Internal\">AllUniqueLabels</a> (<a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Internal.html#t:Map\" title=\"Data.Row.Internal\">Map</a> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>) r), <a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Internal.html#t:Forall\" title=\"Data.Row.Internal\">Forall</a> r <a href=\"Codec-Candid.html#t:Candid\" title=\"Codec.Candid\">Candid</a>, <a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Internal.html#t:Forall\" title=\"Data.Row.Internal\">Forall</a> r <a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Internal.html#t:Unconstrained1\" title=\"Data.Row.Internal\">Unconstrained1</a>)","name":"CandidRow","module":"Codec.Candid","link":"Codec-Candid.html#t:CandidRow"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:CandidArg\">CandidArg</a> a = (CandidSeq (<a href=\"Codec-Candid-Tuples.html#t:AsTuple\" title=\"Codec.Candid.Tuples\">AsTuple</a> a), <a href=\"Codec-Candid-Tuples.html#t:Tuplable\" title=\"Codec.Candid.Tuples\">Tuplable</a> a, <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Type-Reflection.html#t:Typeable\" title=\"Type.Reflection\">Typeable</a> a)","name":"CandidArg","module":"Codec.Candid","link":"Codec-Candid.html#t:CandidArg"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Type-Reflection.html#t:Typeable\" title=\"Type.Reflection\">Typeable</a> a =&gt; <a href=\"#t:CandidVal\">CandidVal</a> a","name":"CandidVal","module":"Codec.Candid","link":"Codec-Candid.html#t:CandidVal"},{"display_html":"<a href=\"#v:seqDesc\">seqDesc</a> :: <span class=\"keyword\">forall</span> a. <a href=\"Codec-Candid.html#t:CandidArg\" title=\"Codec.Candid\">CandidArg</a> a =&gt; <a href=\"Codec-Candid.html#t:SeqDesc\" title=\"Codec.Candid\">SeqDesc</a>","name":"seqDesc","module":"Codec.Candid","link":"Codec-Candid.html#v:seqDesc"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:SeqDesc\">SeqDesc</a>","name":"SeqDesc","module":"Codec.Candid","link":"Codec-Candid.html#t:SeqDesc"},{"display_html":"<a href=\"#v:tieKnot\">tieKnot</a> :: <a href=\"Codec-Candid.html#t:SeqDesc\" title=\"Codec.Candid\">SeqDesc</a> -&gt; [<a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Void.html#t:Void\" title=\"Data.Void\">Void</a>]","name":"tieKnot","module":"Codec.Candid","link":"Codec-Candid.html#v:tieKnot"},{"display_html":"<a href=\"#v:typeDesc\">typeDesc</a> :: <span class=\"keyword\">forall</span> a. <a href=\"Codec-Candid.html#t:Candid\" title=\"Codec.Candid\">Candid</a> a =&gt; <a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Void.html#t:Void\" title=\"Data.Void\">Void</a>","name":"typeDesc","module":"Codec.Candid","link":"Codec-Candid.html#v:typeDesc"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Unary\">Unary</a> a = <a href=\"#v:Unary\">Unary</a> {<ul class=\"subs\"><li><a href=\"#v:unUnary\">unUnary</a> :: a</li></ul>}","name":"Unary Unary unUnary","module":"Codec.Candid","link":"Codec-Candid.html#t:Unary"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Principal\">Principal</a> = <a href=\"#v:Principal\">Principal</a> {<ul class=\"subs\"><li><a href=\"#v:rawPrincipal\">rawPrincipal</a> :: <a href=\"https://hackage.haskell.org/package/bytestring-0.10.12.0/docs/Data-ByteString-Lazy.html#t:ByteString\" title=\"Data.ByteString.Lazy\">ByteString</a></li></ul>}","name":"Principal Principal rawPrincipal","module":"Codec.Candid","link":"Codec-Candid.html#t:Principal"},{"display_html":"<a href=\"#v:prettyPrincipal\">prettyPrincipal</a> :: <a href=\"Codec-Candid.html#t:Principal\" title=\"Codec.Candid\">Principal</a> -&gt; <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"prettyPrincipal","module":"Codec.Candid","link":"Codec-Candid.html#v:prettyPrincipal"},{"display_html":"<a href=\"#v:parsePrincipal\">parsePrincipal</a> :: <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Codec-Candid.html#t:Principal\" title=\"Codec.Candid\">Principal</a>","name":"parsePrincipal","module":"Codec.Candid","link":"Codec-Candid.html#v:parsePrincipal"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Reserved\">Reserved</a> = <a href=\"#v:Reserved\">Reserved</a>","name":"Reserved Reserved","module":"Codec.Candid","link":"Codec-Candid.html#t:Reserved"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:FuncRef\">FuncRef</a> (r :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) = <a href=\"#v:FuncRef\">FuncRef</a> {<ul class=\"subs\"><li><a href=\"#v:service\">service</a> :: <a href=\"Codec-Candid.html#t:Principal\" title=\"Codec.Candid\">Principal</a></li><li><a href=\"#v:method\">method</a> :: <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li></ul>}","name":"FuncRef FuncRef service method","module":"Codec.Candid","link":"Codec-Candid.html#t:FuncRef"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:AnnTrue\">AnnTrue</a>","name":"AnnTrue","module":"Codec.Candid","link":"Codec-Candid.html#t:AnnTrue"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:AnnFalse\">AnnFalse</a>","name":"AnnFalse","module":"Codec.Candid","link":"Codec-Candid.html#t:AnnFalse"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:ServiceRef\">ServiceRef</a> (r :: <a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Internal.html#t:Row\" title=\"Data.Row.Internal\">Row</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) = <a href=\"#v:ServiceRef\">ServiceRef</a> {<ul class=\"subs\"><li><a href=\"#v:rawServiceRef\">rawServiceRef</a> :: <a href=\"Codec-Candid.html#t:Principal\" title=\"Codec.Candid\">Principal</a></li></ul>}","name":"ServiceRef ServiceRef rawServiceRef","module":"Codec.Candid","link":"Codec-Candid.html#t:ServiceRef"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:AsRecord\">AsRecord</a> a = <a href=\"#v:AsRecord\">AsRecord</a> {<ul class=\"subs\"><li><a href=\"#v:unAsRecord\">unAsRecord</a> :: a</li></ul>}","name":"AsRecord AsRecord unAsRecord","module":"Codec.Candid","link":"Codec-Candid.html#t:AsRecord"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:AsVariant\">AsVariant</a> a = <a href=\"#v:AsVariant\">AsVariant</a> {<ul class=\"subs\"><li><a href=\"#v:unAsVariant\">unAsVariant</a> :: a</li></ul>}","name":"AsVariant AsVariant unAsVariant","module":"Codec.Candid","link":"Codec-Candid.html#t:AsVariant"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:CandidService\">CandidService</a> m r = (<a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Internal.html#t:Forall\" title=\"Data.Row.Internal\">Forall</a> r (CandidMethod m), <a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Internal.html#t:AllUniqueLabels\" title=\"Data.Row.Internal\">AllUniqueLabels</a> r)","name":"CandidService","module":"Codec.Candid","link":"Codec-Candid.html#t:CandidService"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:RawService\">RawService</a> m = <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/bytestring-0.10.12.0/docs/Data-ByteString-Lazy.html#t:ByteString\" title=\"Data.ByteString.Lazy\">ByteString</a> -&gt; m <a href=\"https://hackage.haskell.org/package/bytestring-0.10.12.0/docs/Data-ByteString-Lazy.html#t:ByteString\" title=\"Data.ByteString.Lazy\">ByteString</a>","name":"RawService","module":"Codec.Candid","link":"Codec-Candid.html#t:RawService"},{"display_html":"<a href=\"#v:toCandidService\">toCandidService</a> :: <span class=\"keyword\">forall</span> m r. <a href=\"Codec-Candid.html#t:CandidService\" title=\"Codec.Candid\">CandidService</a> m r =&gt; (<span class=\"keyword\">forall</span> a. <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; m a) -&gt; <a href=\"Codec-Candid.html#t:RawService\" title=\"Codec.Candid\">RawService</a> m -&gt; <a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Records.html#t:Rec\" title=\"Data.Row.Records\">Rec</a> r","name":"toCandidService","module":"Codec.Candid","link":"Codec-Candid.html#v:toCandidService"},{"display_html":"<a href=\"#v:fromCandidService\">fromCandidService</a> :: <span class=\"keyword\">forall</span> m r. <a href=\"Codec-Candid.html#t:CandidService\" title=\"Codec.Candid\">CandidService</a> m r =&gt; (<span class=\"keyword\">forall</span> a. <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; m a) -&gt; (<span class=\"keyword\">forall</span> a. <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; m a) -&gt; <a href=\"https://hackage.haskell.org/package/row-types-1.0.1.2/docs/Data-Row-Records.html#t:Rec\" title=\"Data.Row.Records\">Rec</a> r -&gt; <a href=\"Codec-Candid.html#t:RawService\" title=\"Codec.Candid\">RawService</a> m","name":"fromCandidService","module":"Codec.Candid","link":"Codec-Candid.html#v:fromCandidService"},{"display_html":"<a href=\"#v:candid\">candid</a> :: <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Quote.html#t:QuasiQuoter\" title=\"Language.Haskell.TH.Quote\">QuasiQuoter</a>","name":"candid","module":"Codec.Candid","link":"Codec-Candid.html#v:candid"},{"display_html":"<a href=\"#v:candidFile\">candidFile</a> :: <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Quote.html#t:QuasiQuoter\" title=\"Language.Haskell.TH.Quote\">QuasiQuoter</a>","name":"candidFile","module":"Codec.Candid","link":"Codec-Candid.html#v:candidFile"},{"display_html":"<a href=\"#v:candidType\">candidType</a> :: <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Quote.html#t:QuasiQuoter\" title=\"Language.Haskell.TH.Quote\">QuasiQuoter</a>","name":"candidType","module":"Codec.Candid","link":"Codec-Candid.html#v:candidType"},{"display_html":"<a href=\"#v:candidDefs\">candidDefs</a> :: <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Quote.html#t:QuasiQuoter\" title=\"Language.Haskell.TH.Quote\">QuasiQuoter</a>","name":"candidDefs","module":"Codec.Candid","link":"Codec-Candid.html#v:candidDefs"},{"display_html":"<a href=\"#v:candidDefsFile\">candidDefsFile</a> :: <a href=\"https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH-Quote.html#t:QuasiQuoter\" title=\"Language.Haskell.TH.Quote\">QuasiQuoter</a>","name":"candidDefsFile","module":"Codec.Candid","link":"Codec-Candid.html#v:candidDefsFile"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Type\">Type</a> a<ul class=\"subs\"><li>= <a href=\"#v:NatT\">NatT</a></li><li>| <a href=\"#v:Nat8T\">Nat8T</a></li><li>| <a href=\"#v:Nat16T\">Nat16T</a></li><li>| <a href=\"#v:Nat32T\">Nat32T</a></li><li>| <a href=\"#v:Nat64T\">Nat64T</a></li><li>| <a href=\"#v:IntT\">IntT</a></li><li>| <a href=\"#v:Int8T\">Int8T</a></li><li>| <a href=\"#v:Int16T\">Int16T</a></li><li>| <a href=\"#v:Int32T\">Int32T</a></li><li>| <a href=\"#v:Int64T\">Int64T</a></li><li>| <a href=\"#v:Float32T\">Float32T</a></li><li>| <a href=\"#v:Float64T\">Float64T</a></li><li>| <a href=\"#v:BoolT\">BoolT</a></li><li>| <a href=\"#v:TextT\">TextT</a></li><li>| <a href=\"#v:NullT\">NullT</a></li><li>| <a href=\"#v:ReservedT\">ReservedT</a></li><li>| <a href=\"#v:EmptyT\">EmptyT</a></li><li>| <a href=\"#v:OptT\">OptT</a> (<a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> a)</li><li>| <a href=\"#v:VecT\">VecT</a> (<a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> a)</li><li>| <a href=\"#v:RecT\">RecT</a> (<a href=\"Codec-Candid.html#t:Fields\" title=\"Codec.Candid\">Fields</a> a)</li><li>| <a href=\"#v:VariantT\">VariantT</a> (<a href=\"Codec-Candid.html#t:Fields\" title=\"Codec.Candid\">Fields</a> a)</li><li>| <a href=\"#v:FuncT\">FuncT</a> (<a href=\"Codec-Candid.html#t:MethodType\" title=\"Codec.Candid\">MethodType</a> a)</li><li>| <a href=\"#v:ServiceT\">ServiceT</a> [(<a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>, <a href=\"Codec-Candid.html#t:MethodType\" title=\"Codec.Candid\">MethodType</a> a)]</li><li>| <a href=\"#v:PrincipalT\">PrincipalT</a></li><li>| <a href=\"#v:BlobT\">BlobT</a></li><li>| <a href=\"#v:FutureT\">FutureT</a></li><li>| <a href=\"#v:RefT\">RefT</a> a</li></ul>","name":"Type EmptyT NatT Nat8T Nat16T Nat32T Nat64T IntT Int8T Int16T Int32T Int64T Float32T Float64T BoolT TextT NullT ReservedT OptT VecT RecT VariantT FuncT ServiceT PrincipalT BlobT FutureT RefT","module":"Codec.Candid","link":"Codec-Candid.html#t:Type"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:MethodType\">MethodType</a> a = <a href=\"#v:MethodType\">MethodType</a> {<ul class=\"subs\"><li><a href=\"#v:methParams\">methParams</a> :: [<a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> a]</li><li><a href=\"#v:methResults\">methResults</a> :: [<a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> a]</li><li><a href=\"#v:methQuery\">methQuery</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li><li><a href=\"#v:methCompQuery\">methCompQuery</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li><li><a href=\"#v:methOneway\">methOneway</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li></ul>}","name":"MethodType MethodType methParams methResults methQuery methCompQuery methOneway","module":"Codec.Candid","link":"Codec-Candid.html#t:MethodType"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Fields\">Fields</a> a = [(<a href=\"Codec-Candid.html#t:FieldName\" title=\"Codec.Candid\">FieldName</a>, <a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> a)]","name":"Fields","module":"Codec.Candid","link":"Codec-Candid.html#t:Fields"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:FieldName\">FieldName</a>","name":"FieldName","module":"Codec.Candid","link":"Codec-Candid.html#t:FieldName"},{"display_html":"<a href=\"#v:labledField\">labledField</a> :: <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"Codec-Candid.html#t:FieldName\" title=\"Codec.Candid\">FieldName</a>","name":"labledField","module":"Codec.Candid","link":"Codec-Candid.html#v:labledField"},{"display_html":"<a href=\"#v:hashedField\">hashedField</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Word.html#t:Word32\" title=\"Data.Word\">Word32</a> -&gt; <a href=\"Codec-Candid.html#t:FieldName\" title=\"Codec.Candid\">FieldName</a>","name":"hashedField","module":"Codec.Candid","link":"Codec-Candid.html#v:hashedField"},{"display_html":"<a href=\"#v:fieldHash\">fieldHash</a> :: <a href=\"Codec-Candid.html#t:FieldName\" title=\"Codec.Candid\">FieldName</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Word.html#t:Word32\" title=\"Data.Word\">Word32</a>","name":"fieldHash","module":"Codec.Candid","link":"Codec-Candid.html#v:fieldHash"},{"display_html":"<a href=\"#v:escapeFieldName\">escapeFieldName</a> :: <a href=\"Codec-Candid.html#t:FieldName\" title=\"Codec.Candid\">FieldName</a> -&gt; <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"escapeFieldName","module":"Codec.Candid","link":"Codec-Candid.html#v:escapeFieldName"},{"display_html":"<a href=\"#v:unescapeFieldName\">unescapeFieldName</a> :: <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"Codec-Candid.html#t:FieldName\" title=\"Codec.Candid\">FieldName</a>","name":"unescapeFieldName","module":"Codec.Candid","link":"Codec-Candid.html#v:unescapeFieldName"},{"display_html":"<a href=\"#v:candidHash\">candidHash</a> :: <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Word.html#t:Word32\" title=\"Data.Word\">Word32</a>","name":"candidHash","module":"Codec.Candid","link":"Codec-Candid.html#v:candidHash"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Value\">Value</a><ul class=\"subs\"><li>= <a href=\"#v:NumV\">NumV</a> <a href=\"https://hackage.haskell.org/package/scientific-0.3.8.0/docs/Data-Scientific.html#t:Scientific\" title=\"Data.Scientific\">Scientific</a></li><li>| <a href=\"#v:NatV\">NatV</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/GHC-Natural.html#t:Natural\" title=\"GHC.Natural\">Natural</a></li><li>| <a href=\"#v:Nat8V\">Nat8V</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Word.html#t:Word8\" title=\"Data.Word\">Word8</a></li><li>| <a href=\"#v:Nat16V\">Nat16V</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Word.html#t:Word16\" title=\"Data.Word\">Word16</a></li><li>| <a href=\"#v:Nat32V\">Nat32V</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Word.html#t:Word32\" title=\"Data.Word\">Word32</a></li><li>| <a href=\"#v:Nat64V\">Nat64V</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Word.html#t:Word64\" title=\"Data.Word\">Word64</a></li><li>| <a href=\"#v:IntV\">IntV</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a></li><li>| <a href=\"#v:Int8V\">Int8V</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int8\" title=\"Data.Int\">Int8</a></li><li>| <a href=\"#v:Int16V\">Int16V</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int16\" title=\"Data.Int\">Int16</a></li><li>| <a href=\"#v:Int32V\">Int32V</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int32\" title=\"Data.Int\">Int32</a></li><li>| <a href=\"#v:Int64V\">Int64V</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a></li><li>| <a href=\"#v:Float32V\">Float32V</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Prelude.html#t:Float\" title=\"Prelude\">Float</a></li><li>| <a href=\"#v:Float64V\">Float64V</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Prelude.html#t:Double\" title=\"Prelude\">Double</a></li><li>| <a href=\"#v:BoolV\">BoolV</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li><li>| <a href=\"#v:TextV\">TextV</a> <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li><li>| <a href=\"#v:NullV\">NullV</a></li><li>| <a href=\"#v:ReservedV\">ReservedV</a></li><li>| <a href=\"#v:OptV\">OptV</a> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a>)</li><li>| <a href=\"#v:RepeatV\">RepeatV</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a> <a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a></li><li>| <a href=\"#v:VecV\">VecV</a> (<a href=\"https://hackage.haskell.org/package/vector-0.13.1.0/docs/Data-Vector.html#t:Vector\" title=\"Data.Vector\">Vector</a> <a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a>)</li><li>| <a href=\"#v:RecV\">RecV</a> [(<a href=\"Codec-Candid.html#t:FieldName\" title=\"Codec.Candid\">FieldName</a>, <a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a>)]</li><li>| <a href=\"#v:TupV\">TupV</a> [<a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a>]</li><li>| <a href=\"#v:VariantV\">VariantV</a> <a href=\"Codec-Candid.html#t:FieldName\" title=\"Codec.Candid\">FieldName</a> <a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a></li><li>| <a href=\"#v:FuncV\">FuncV</a> <a href=\"Codec-Candid.html#t:Principal\" title=\"Codec.Candid\">Principal</a> <a href=\"https://hackage.haskell.org/package/text-1.2.4.1/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li><li>| <a href=\"#v:ServiceV\">ServiceV</a> <a href=\"Codec-Candid.html#t:Principal\" title=\"Codec.Candid\">Principal</a></li><li>| <a href=\"#v:PrincipalV\">PrincipalV</a> <a href=\"Codec-Candid.html#t:Principal\" title=\"Codec.Candid\">Principal</a></li><li>| <a href=\"#v:BlobV\">BlobV</a> <a href=\"https://hackage.haskell.org/package/bytestring-0.10.12.0/docs/Data-ByteString-Lazy.html#t:ByteString\" title=\"Data.ByteString.Lazy\">ByteString</a></li><li>| <a href=\"#v:AnnV\">AnnV</a> <a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a> (<a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Void.html#t:Void\" title=\"Data.Void\">Void</a>)</li><li>| <a href=\"#v:FutureV\">FutureV</a></li></ul>","name":"Value NumV NatV Nat8V Nat16V Nat32V Nat64V IntV Int8V Int16V Int32V Int64V Float32V Float64V BoolV TextV NullV ReservedV OptV RepeatV VecV RecV TupV VariantV FuncV ServiceV PrincipalV BlobV AnnV FutureV","module":"Codec.Candid","link":"Codec-Candid.html#t:Value"},{"display_html":"<a href=\"#v:isSubtypeOf\">isSubtypeOf</a> :: (<a href=\"https://hackage.haskell.org/package/prettyprinter-1.7.1/docs/Prettyprinter.html#t:Pretty\" title=\"Prettyprinter\">Pretty</a> k1, <a href=\"https://hackage.haskell.org/package/prettyprinter-1.7.1/docs/Prettyprinter.html#t:Pretty\" title=\"Prettyprinter\">Pretty</a> k2, <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Ord.html#t:Ord\" title=\"Data.Ord\">Ord</a> k1, <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Ord.html#t:Ord\" title=\"Data.Ord\">Ord</a> k2) =&gt; <a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> (Ref k1 <a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a>) -&gt; <a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a> (Ref k2 <a href=\"Codec-Candid.html#t:Type\" title=\"Codec.Candid\">Type</a>) -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> ()","name":"isSubtypeOf","module":"Codec.Candid","link":"Codec-Candid.html#v:isSubtypeOf"},{"display_html":"<a href=\"#v:decodeVals\">decodeVals</a> :: <a href=\"https://hackage.haskell.org/package/bytestring-0.10.12.0/docs/Data-ByteString-Lazy.html#t:ByteString\" title=\"Data.ByteString.Lazy\">ByteString</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> (<a href=\"Codec-Candid.html#t:SeqDesc\" title=\"Codec.Candid\">SeqDesc</a>, [<a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a>])","name":"decodeVals","module":"Codec.Candid","link":"Codec-Candid.html#v:decodeVals"},{"display_html":"<a href=\"#v:fromCandidVals\">fromCandidVals</a> :: <a href=\"Codec-Candid.html#t:CandidArg\" title=\"Codec.Candid\">CandidArg</a> a =&gt; [<a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a>] -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> a","name":"fromCandidVals","module":"Codec.Candid","link":"Codec-Candid.html#v:fromCandidVals"},{"display_html":"<a href=\"#v:toCandidVals\">toCandidVals</a> :: <a href=\"Codec-Candid.html#t:CandidArg\" title=\"Codec.Candid\">CandidArg</a> a =&gt; a -&gt; [<a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a>]","name":"toCandidVals","module":"Codec.Candid","link":"Codec-Candid.html#v:toCandidVals"},{"display_html":"<a href=\"#v:encodeDynValues\">encodeDynValues</a> :: [<a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a>] -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/binary-0.8.8.0/docs/Data-Binary-Builder.html#t:Builder\" title=\"Data.Binary.Builder\">Builder</a>","name":"encodeDynValues","module":"Codec.Candid","link":"Codec-Candid.html#v:encodeDynValues"},{"display_html":"<a href=\"#v:encodeTextual\">encodeTextual</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"https://hackage.haskell.org/package/bytestring-0.10.12.0/docs/Data-ByteString-Lazy.html#t:ByteString\" title=\"Data.ByteString.Lazy\">ByteString</a>","name":"encodeTextual","module":"Codec.Candid","link":"Codec-Candid.html#v:encodeTextual"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:DidFile\">DidFile</a>","name":"DidFile","module":"Codec.Candid","link":"Codec-Candid.html#t:DidFile"},{"display_html":"<a href=\"#v:parseDid\">parseDid</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Codec-Candid.html#t:DidFile\" title=\"Codec.Candid\">DidFile</a>","name":"parseDid","module":"Codec.Candid","link":"Codec-Candid.html#v:parseDid"},{"display_html":"<a href=\"#v:parseValue\">parseValue</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> <a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a>","name":"parseValue","module":"Codec.Candid","link":"Codec-Candid.html#v:parseValue"},{"display_html":"<a href=\"#v:parseValues\">parseValues</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> [<a href=\"Codec-Candid.html#t:Value\" title=\"Codec.Candid\">Value</a>]","name":"parseValues","module":"Codec.Candid","link":"Codec-Candid.html#v:parseValues"}]